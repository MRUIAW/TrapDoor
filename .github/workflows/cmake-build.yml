name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure cmake
        shell: bash
        #github.workspace =trapdoor/trapdoor
        working-directory: ${{github.workspace}}
        run: cmake .

      - name: Build
        shell: bash
        working-directory: ${{github.workspace}}
        run: cmake --build . --config Release

      - name: MkDir
        shell: bash
        working-directory: ${{github.workspace}}
        run: mkdir D:/out

      - name: Copy Output Files
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          cp -r ./package/lang D:/out
          cp ./LICENSE D:/out
          cp ./changelog.md D:/out
          cp ./README.md D:/out
          cp ./README_zh.md D:/out
          cp ./Release/*.dll D:/out
          cp ./package/trapdoor-config.json D:/out
          cp ./trapdoor-disclaimer.md D:/out

      - name: package
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        run: Compress-Archive -Path D:/out/* out.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TRAPDOOR_PUBLISH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./out.zip
          asset_name: TrapDoor.zip
          asset_content_type: application/zip

      - name: Upload Actions File
        uses: actions/upload-artifact@v1.0.0
        with:
          name: TrapDoor
          path: D:/out
